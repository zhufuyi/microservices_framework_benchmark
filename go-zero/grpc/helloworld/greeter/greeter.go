// Code generated by goctl. DO NOT EDIT.
// Source: greeter.proto

package greeter

import (
	"context"

	helloworldV1 "helloworld/helloworld/api/helloworld/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	HelloReply   = helloworldV1.HelloReply
	HelloRequest = helloworldV1.HelloRequest

	Greeter interface {
		// Sends a greeting
		SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	}

	defaultGreeter struct {
		cli zrpc.Client
	}
)

func NewGreeter(cli zrpc.Client) Greeter {
	return &defaultGreeter{
		cli: cli,
	}
}

// Sends a greeting
func (m *defaultGreeter) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	client := helloworldV1.NewGreeterClient(m.cli.Conn())
	return client.SayHello(ctx, in, opts...)
}
